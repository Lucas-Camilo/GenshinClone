//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/GenshinImpactMovementSystem/InputActions/Characters/Utilities/CharacterManagerController.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @CharacterManagerController : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @CharacterManagerController()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""CharacterManagerController"",
    ""maps"": [
        {
            ""name"": ""SetCharacter"",
            ""id"": ""cdef8b5d-100b-4d30-a1c3-20e43f87eb67"",
            ""actions"": [
                {
                    ""name"": ""Teclas"",
                    ""type"": ""Button"",
                    ""id"": ""bd09aa51-fda7-47b9-a780-30d47017974c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""23cef96e-c780-405f-b4ed-84880a9fc170"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Teclas"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8926e907-2c5c-4573-8df3-77962b46b639"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Teclas"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d6afffaf-8b62-4663-950b-efcf1185e9e6"",
                    ""path"": ""<Keyboard>/3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Teclas"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b1fbfc68-331a-4425-a455-5a07839162b8"",
                    ""path"": ""<Keyboard>/4"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Teclas"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // SetCharacter
        m_SetCharacter = asset.FindActionMap("SetCharacter", throwIfNotFound: true);
        m_SetCharacter_Teclas = m_SetCharacter.FindAction("Teclas", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // SetCharacter
    private readonly InputActionMap m_SetCharacter;
    private ISetCharacterActions m_SetCharacterActionsCallbackInterface;
    private readonly InputAction m_SetCharacter_Teclas;
    public struct SetCharacterActions
    {
        private @CharacterManagerController m_Wrapper;
        public SetCharacterActions(@CharacterManagerController wrapper) { m_Wrapper = wrapper; }
        public InputAction @Teclas => m_Wrapper.m_SetCharacter_Teclas;
        public InputActionMap Get() { return m_Wrapper.m_SetCharacter; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(SetCharacterActions set) { return set.Get(); }
        public void SetCallbacks(ISetCharacterActions instance)
        {
            if (m_Wrapper.m_SetCharacterActionsCallbackInterface != null)
            {
                @Teclas.started -= m_Wrapper.m_SetCharacterActionsCallbackInterface.OnTeclas;
                @Teclas.performed -= m_Wrapper.m_SetCharacterActionsCallbackInterface.OnTeclas;
                @Teclas.canceled -= m_Wrapper.m_SetCharacterActionsCallbackInterface.OnTeclas;
            }
            m_Wrapper.m_SetCharacterActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Teclas.started += instance.OnTeclas;
                @Teclas.performed += instance.OnTeclas;
                @Teclas.canceled += instance.OnTeclas;
            }
        }
    }
    public SetCharacterActions @SetCharacter => new SetCharacterActions(this);
    public interface ISetCharacterActions
    {
        void OnTeclas(InputAction.CallbackContext context);
    }
}
